#import necessary libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.mixture import GaussianMixture
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt
import seaborn as sns
# Define column names based on the dataset's attribute information
columns = ['ID', 'Diagnosis'] + [f'feature_{i}' for i in range(1, 31)]

# Load the dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data'
data = pd.read_csv(url, names=columns)

# Drop the ID column as it's not needed for analysis
data.drop('ID', axis=1, inplace=True)

# Encode the Diagnosis column: M = 1 (Malignant), B = 0 (Benign)
data['Diagnosis'] = data['Diagnosis'].map({'M': 1, 'B': 0})

# Check for missing values
print(data.isnull().sum().sum())  # Should output 0 if there are no missing values

# Standardize the feature columns
features = data.columns[1:]
scaler = StandardScaler()
data[features] = scaler.fit_transform(data[features])

# Perform hierarchical clustering
linked = linkage(data[features], method='ward')

# Plot the dendrogram
plt.figure(figsize=(10, 7))
dendrogram(linked, orientation='top', distance_sort='descending', show_leaf_counts=False)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Sample index')
plt.ylabel('Distance')
plt.show()

# Fit the GMM model
gmm = GaussianMixture(n_components=2, random_state=42)
data['Cluster'] = gmm.fit_predict(data[features])

# Map clusters to diagnosis for interpretation
# This step assumes that cluster 0 corresponds to benign and cluster 1 to malignant
# You may need to adjust this mapping based on your results
data['Cluster'] = data['Cluster'].map({0: 'Benign', 1: 'Malignant'})

# Compare the clusters with the actual diagnosis
print(pd.crosstab(data['Diagnosis'], data['Cluster'], rownames=['Actual'], colnames=['Predicted']))


# Visualize the clusters using a pairplot
sns.pairplot(data, vars=features[:5], hue='Cluster', palette='Set1')
plt.show()


